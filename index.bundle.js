!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=334)}({334:function(t,n,e){"use strict";e(335);var r=e(344);window.onload=function(){(0,r.content)()}},335:function(t,n,e){var r=e(336);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(342)(r,o);r.locals&&(t.exports=r.locals)},336:function(t,n,e){n=t.exports=e(337)(!1);var r=e(338),o=r(e(339)),i=r(e(340)),a=r(e(341));n.push([t.i,"@font-face {\n  font-family: 'Roboto';\n  font-weight: 300;\n  src: url("+o+") format('truetype');\n}\n@font-face {\n  font-family: 'Roboto';\n  font-weight: normal;\n  src: url("+i+") format('truetype');\n}\n@font-face {\n  font-family: 'Roboto';\n  font-weight: bold;\n  src: url("+a+") format('truetype');\n}\n.content {\n  position: absolute;\n  top: 50%;\n  right: 0;\n  left: 0;\n  margin: auto;\n  padding: 10px;\n  width: 302px;\n  border: solid 1px #808080;\n  -webkit-transform: translateY(-50%);\n      -ms-transform: translateY(-50%);\n          transform: translateY(-50%);\n}\n.content__field {\n  margin-bottom: 10px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  width: 300px;\n  height: 300px;\n}\n.content__field-item {\n  width: 73px;\n  height: 73px;\n  border: solid 1px #808080;\n}\n.content__field-item_color_red {\n  background: #f00;\n}\n.content__field-item_color_pink {\n  background: #f0f;\n}\n.content__field-item_color_orange {\n  background: #ffa500;\n}\n.content__field-item_color_yellow {\n  background: #ff0;\n}\n.content__field-item_color_green {\n  background: #0f0;\n}\n.content__field-item_color_blue {\n  background: #00bfff;\n}\n.content__field-item_color_sapphire {\n  background: #00f;\n}\n.content__field-item_color_brown {\n  background: #800000;\n}\n.content__btn {\n  display: block;\n}\n.content__timer {\n  margin-top: 10px;\n  display: block;\n}\nbody {\n  margin: 0;\n  padding: 0;\n  font-size: 18px;\n  color: #561362;\n  font-family: 'Roboto', sans-serif;\n  background: #fbf2fd;\n}\n",""])},337:function(t,n,e){"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map(function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[e].concat(i).concat([o]).join("\n")}var a;return[e].join("\n")}(n,t);return n[2]?"@media "+n[2]+"{"+e+"}":e}).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];null!=a[0]&&r[a[0]]||(e&&!a[2]?a[2]=e:e&&(a[2]="("+a[2]+") and ("+e+")"),n.push(a))}},n}},338:function(t,n,e){"use strict";t.exports=function(t,n){return"string"!=typeof t?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),/["'() \t\n]/.test(t)||n?'"'+t.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':t)}},339:function(t,n){t.exports="assets/fonts/Roboto-Light.ttf"},340:function(t,n){t.exports="assets/fonts/Roboto-Regular.ttf"},341:function(t,n){t.exports="assets/fonts/Roboto-Bold.ttf"},342:function(t,n,e){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),c=function(t){var n={};return function(t,e){if("function"==typeof t)return t();if(void 0===n[t]){var r=function(t,n){return n?n.querySelector(t):document.querySelector(t)}.call(this,t,e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}n[t]=r}return n[t]}}(),s=null,f=0,l=[],u=e(343);function d(t,n){for(var e=0;e<t.length;e++){var r=t[e],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(y(r.parts[a],n))}else{var c=[];for(a=0;a<r.parts.length;a++)c.push(y(r.parts[a],n));i[r.id]={id:r.id,refs:1,parts:c}}}}function p(t,n){for(var e=[],r={},o=0;o<t.length;o++){var i=t[o],a=n.base?i[0]+n.base:i[0],c={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(c):e.push(r[a]={id:a,parts:[c]})}return e}function b(t,n){var e=c(t.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===t.insertAt)r?r.nextSibling?e.insertBefore(n,r.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),l.push(n);else if("bottom"===t.insertAt)e.appendChild(n);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=c(t.insertAt.before,e);e.insertBefore(n,o)}}function m(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=l.indexOf(t);n>=0&&l.splice(n,1)}function v(t){var n=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return e.nc}();r&&(t.attrs.nonce=r)}return h(n,t.attrs),b(t,n),n}function h(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})}function y(t,n){var e,r,o,i;if(n.transform&&t.css){if(!(i="function"==typeof n.transform?n.transform(t.css):n.transform.default(t.css)))return function(){};t.css=i}if(n.singleton){var a=f++;e=s||(s=v(n)),r=x.bind(null,e,a,!1),o=x.bind(null,e,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(t){var n=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",h(n,t.attrs),b(t,n),n}(n),r=function(t,n,e){var r=e.css,o=e.sourceMap,i=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||i)&&(r=u(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),c=t.href;t.href=URL.createObjectURL(a),c&&URL.revokeObjectURL(c)}.bind(null,e,n),o=function(){m(e),e.href&&URL.revokeObjectURL(e.href)}):(e=v(n),r=function(t,n){var e=n.css,r=n.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}.bind(null,e),o=function(){m(e)});return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else o()}}t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=a()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var e=p(t,n);return d(e,n),function(t){for(var r=[],o=0;o<e.length;o++){var a=e[o];(c=i[a.id]).refs--,r.push(c)}t&&d(p(t,n),n);for(o=0;o<r.length;o++){var c;if(0===(c=r[o]).refs){for(var s=0;s<c.parts.length;s++)c.parts[s]();delete i[c.id]}}}};var g,_=(g=[],function(t,n){return g[t]=n,g.filter(Boolean).join("\n")});function x(t,n,e,r){var o=e?"":r.css;if(t.styleSheet)t.styleSheet.cssText=_(n,o);else{var i=document.createTextNode(o),a=t.childNodes;a[n]&&t.removeChild(a[n]),a.length?t.insertBefore(i,a[n]):t.appendChild(i)}}},343:function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var e=n.protocol+"//"+n.host,r=e+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,n){var o,i=n.trim().replace(/^"(.*)"$/,function(t,n){return n}).replace(/^'(.*)'$/,function(t,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?e+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},344:function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.content=function(){var t=document.querySelector(".content"),n=t.querySelector(".content__field").querySelectorAll(".content__field-item"),e=t.querySelector(".content__btn"),r=t.querySelector(".content__timer"),o=null,i=null,a=new Array(15),c=[],s=["red","pink","orange","yellow","green","blue","sapphire","brown"],f=function t(){o=setTimeout(function(){r.textContent=function(t){var n=new Date,e=Math.floor((n.getTime()-t.getTime())/6e4),r=((n.getTime()-t.getTime())%6e4/1e3).toFixed(0);return(e<10?"0":"")+e+":"+(r<10?"0":"")+r+":"+n.getMilliseconds()}(i),t()},10)},l=function(t){clearTimeout(t)},u=function(t,n){return t.getAttribute("class").split(" ").includes(n)},d=function(t,n){var e=t.getAttribute("class");t.setAttribute("class",e+" "+n)},p=function(t,n){var e=t.getAttribute("class").split(" ").filter(function(t){return t===n}).join(" ");t.setAttribute("class",e)},b=function(t){var e=Array.prototype.slice.call(n).indexOf(t),i=c.length,s=c[i-1],f=c[i-2],b="content__field-item_color_"+a[e],m="Вы выиграли!\r\nЗатраченное время: ";if(!c.includes(t)){if(0===i)return d(t,b),void(c=c.concat(t));if(1===i&&!u(s,b))return p(s,"content__field-item"),void c.pop();if(u(s,b))return d(t,b),c=c.concat(t),15===i?(l(o),void setTimeout(function(){return alert(m+r.textContent)},300)):void 0;if(v=f,s.getAttribute("class")===v.getAttribute("class"))return d(t,b),c=c.concat(t),15===i?(l(o),void setTimeout(function(){return alert(m+r.textContent)},300)):void 0;var v;p(s,"content__field-item"),c.pop()}};e.addEventListener("click",function(){var t;Array.prototype.forEach.call(n,function(t){return p(t,"content__field-item")}),o=null,i=null,a=new Array(15),c=[],Array.prototype.forEach.call(n,function(t){t.addEventListener("click",b.bind(null,t))}),i=new Date,f(),a=(t=s).slice().concat(t.slice()).sort(function(){return Math.random()-.5})})}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,